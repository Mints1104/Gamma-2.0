<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/helpers/DragTouchListener.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/helpers/DragTouchListener.kt" />
              <option name="originalContent" value="package com.mints.projectgammatwo.helpers&#10;&#10;" />
              <option name="updatedContent" value="package com.mints.projectgammatwo.helpers&#13;&#10;&#13;&#10;import android.os.Handler&#13;&#10;import android.os.Looper&#13;&#10;import android.util.Log&#13;&#10;import android.view.MotionEvent&#13;&#10;import android.view.View&#13;&#10;import android.view.WindowManager&#13;&#10;&#13;&#10;class DragTouchListener(&#13;&#10;    private val params: WindowManager.LayoutParams,&#13;&#10;    private val windowManager: WindowManager,&#13;&#10;    private val rootView: View,&#13;&#10;    private val onLongPress: (() -&gt; Unit)? = null&#13;&#10;) : View.OnTouchListener {&#13;&#10;&#13;&#10;    private var initialX = 0&#13;&#10;    private var initialY = 0&#13;&#10;    private var downRawX = 0f&#13;&#10;    private var downRawY = 0f&#13;&#10;    private var hasMoved = false&#13;&#10;&#13;&#10;    private val longPressHandler = Handler(Looper.getMainLooper())&#13;&#10;    private val longPressRunnable = Runnable {&#13;&#10;        if (!hasMoved) {&#13;&#10;            Log.d(&quot;DragTouch&quot;, &quot;Long press detected!&quot;)&#13;&#10;            onLongPress?.invoke()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        private const val LONG_PRESS_TIMEOUT = 500L // 500ms for long press&#13;&#10;        private const val MOVE_THRESHOLD = 10 // pixels&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onTouch(view: View, event: MotionEvent): Boolean {&#13;&#10;        when (event.action) {&#13;&#10;            MotionEvent.ACTION_DOWN -&gt; {&#13;&#10;                Log.d(&quot;DragTouch&quot;, &quot;DOWN at (${event.rawX}, ${event.rawY})&quot;)&#13;&#10;                initialX = params.x&#13;&#10;                initialY = params.y&#13;&#10;                downRawX = event.rawX&#13;&#10;                downRawY = event.rawY&#13;&#10;                hasMoved = false&#13;&#10;&#13;&#10;                // Start long press detection&#13;&#10;                longPressHandler.postDelayed(longPressRunnable, LONG_PRESS_TIMEOUT)&#13;&#10;                return true&#13;&#10;            }&#13;&#10;            MotionEvent.ACTION_MOVE -&gt; {&#13;&#10;                val deltaX = (event.rawX - downRawX).toInt()&#13;&#10;                val deltaY = (event.rawY - downRawY).toInt()&#13;&#10;&#13;&#10;                // Check if user has moved beyond threshold&#13;&#10;                if (Math.abs(deltaX) &gt; MOVE_THRESHOLD || Math.abs(deltaY) &gt; MOVE_THRESHOLD) {&#13;&#10;                    hasMoved = true&#13;&#10;                    longPressHandler.removeCallbacks(longPressRunnable)&#13;&#10;&#13;&#10;                    Log.d(&quot;DragTouch&quot;, &quot;MOVE to (${event.rawX}, ${event.rawY})&quot;)&#13;&#10;                    // Calculate desired new position&#13;&#10;                    val newX = initialX + deltaX&#13;&#10;                    val newY = initialY + deltaY&#13;&#10;&#13;&#10;                    // Get screen &amp; overlay dimensions&#13;&#10;                    val dm = rootView.resources.displayMetrics&#13;&#10;                    val maxX = dm.widthPixels - rootView.width&#13;&#10;                    val maxY = dm.heightPixels - rootView.height&#13;&#10;&#13;&#10;                    // Clamp to [0..max]&#13;&#10;                    params.x = newX.coerceIn(0, maxX)&#13;&#10;                    params.y = newY.coerceIn(0, maxY)&#13;&#10;&#13;&#10;                    // Apply update&#13;&#10;                    windowManager.updateViewLayout(rootView, params)&#13;&#10;                }&#13;&#10;                return true&#13;&#10;            }&#13;&#10;            MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -&gt; {&#13;&#10;                // Cancel long press if finger is lifted&#13;&#10;                longPressHandler.removeCallbacks(longPressRunnable)&#13;&#10;                return true&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return false&#13;&#10;    }&#13;&#10;&#13;&#10;    /** Expose current overlay X (left) */&#13;&#10;    fun getCurrentParamsX(): Int = params.x&#13;&#10;&#13;&#10;    /** Expose current overlay Y (top) */&#13;&#10;    fun getCurrentParamsY(): Int = params.y&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/helpers/ItemTouchHelperCallback.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/helpers/ItemTouchHelperCallback.kt" />
              <option name="updatedContent" value="package com.mints.projectgammatwo.helpers&#10;&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;interface ItemTouchHelperAdapter {&#10;    fun onItemMove(fromPosition: Int, toPosition: Int): Boolean&#10;}&#10;&#10;class ItemTouchHelperCallback(&#10;    private val adapter: ItemTouchHelperAdapter&#10;) : ItemTouchHelper.Callback() {&#10;&#10;    override fun isLongPressDragEnabled(): Boolean = false&#10;&#10;    override fun isItemViewSwipeEnabled(): Boolean = false&#10;&#10;    override fun getMovementFlags(&#10;        recyclerView: RecyclerView,&#10;        viewHolder: RecyclerView.ViewHolder&#10;    ): Int {&#10;        val dragFlags = ItemTouchHelper.UP or ItemTouchHelper.DOWN&#10;        return makeMovementFlags(dragFlags, 0)&#10;    }&#10;&#10;    override fun onMove(&#10;        recyclerView: RecyclerView,&#10;        viewHolder: RecyclerView.ViewHolder,&#10;        target: RecyclerView.ViewHolder&#10;    ): Boolean {&#10;        return adapter.onItemMove(viewHolder.adapterPosition, target.adapterPosition)&#10;    }&#10;&#10;    override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;        // Not implemented&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/ui/RaidsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mints/projectgammatwo/ui/RaidsFragment.kt" />
              <option name="updatedContent" value="package com.mints.projectgammatwo.ui&#10;&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import com.mints.projectgammatwo.R&#10;import com.mints.projectgammatwo.helpers.OverlayServiceManager&#10;import com.mints.projectgammatwo.recyclerviews.RaidsAdapter&#10;import com.mints.projectgammatwo.viewmodels.RaidsViewModel&#10;import androidx.core.net.toUri&#10;&#10;class RaidsFragment : Fragment() {&#10;&#10;    private val viewModel: RaidsViewModel by viewModels()&#10;    private lateinit var adapter: RaidsAdapter&#10;    private lateinit var swipeRefresh: SwipeRefreshLayout&#10;    private lateinit var serviceManager: OverlayServiceManager&#10;    private lateinit var scrollToTopFab: FloatingActionButton&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var errorHandlerText: TextView&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_raids, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        serviceManager = OverlayServiceManager(requireContext())&#10;&#10;        recyclerView = view.findViewById(R.id.raidsRecyclerView)&#10;        swipeRefresh = view.findViewById(R.id.swipeRefresh)&#10;        scrollToTopFab = view.findViewById(R.id.scrollToTopFab)&#10;        errorHandlerText = view.findViewById(R.id.errorHandlerText)&#10;&#10;        adapter = RaidsAdapter { raid -&gt;&#10;            viewModel.deleteRaid(raid)&#10;        }&#10;        recyclerView.adapter = adapter&#10;        recyclerView.layoutManager = LinearLayoutManager(context)&#10;&#10;        setupScrollToTop()&#10;&#10;        swipeRefresh.setOnRefreshListener {&#10;            viewModel.fetchRaids()&#10;        }&#10;&#10;        viewModel.raidsLiveData.observe(viewLifecycleOwner) { raids -&gt;&#10;            adapter.submitList(raids)&#10;            swipeRefresh.isRefreshing = false&#10;&#10;            if (raids.isEmpty()) {&#10;                errorHandlerText.visibility = View.VISIBLE&#10;                errorHandlerText.text = &quot;No raids available. Please check your data sources in Settings.&quot;&#10;            } else {&#10;                errorHandlerText.visibility = View.GONE&#10;            }&#10;&#10;            recyclerView.post {&#10;                checkAndUpdateFabVisibility()&#10;            }&#10;        }&#10;&#10;        viewModel.error.observe(viewLifecycleOwner) { errorMessage -&gt;&#10;            if (errorMessage.isNotEmpty()) {&#10;                Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()&#10;                swipeRefresh.isRefreshing = false&#10;            }&#10;        }&#10;&#10;        val raidsCountTextView = view.findViewById&lt;TextView&gt;(R.id.raidsCountText)&#10;        viewModel.raidsCountLiveData.observe(viewLifecycleOwner) { count -&gt;&#10;            raidsCountTextView.text = &quot;Total Raids: $count&quot;&#10;        }&#10;&#10;        val startServiceButton = view.findViewById&lt;Button&gt;(R.id.startServiceButton)&#10;        startServiceButton.setOnClickListener {&#10;            handleStartServiceClick()&#10;        }&#10;&#10;        viewModel.fetchRaids()&#10;        updateServiceButtonState(startServiceButton)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        view?.findViewById&lt;Button&gt;(R.id.startServiceButton)?.let {&#10;            updateServiceButtonState(it)&#10;        }&#10;        checkAndUpdateFabVisibility()&#10;    }&#10;&#10;    private fun setupScrollToTop() {&#10;        recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {&#10;            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {&#10;                super.onScrolled(recyclerView, dx, dy)&#10;                checkAndUpdateFabVisibility()&#10;            }&#10;        })&#10;&#10;        adapter.registerAdapterDataObserver(object : RecyclerView.AdapterDataObserver() {&#10;            override fun onItemRangeInserted(positionStart: Int, itemCount: Int) {&#10;                super.onItemRangeInserted(positionStart, itemCount)&#10;                recyclerView.post { checkAndUpdateFabVisibility() }&#10;            }&#10;&#10;            override fun onItemRangeRemoved(positionStart: Int, itemCount: Int) {&#10;                super.onItemRangeRemoved(positionStart, itemCount)&#10;                recyclerView.post { checkAndUpdateFabVisibility() }&#10;            }&#10;&#10;            override fun onChanged() {&#10;                super.onChanged()&#10;                recyclerView.post { checkAndUpdateFabVisibility() }&#10;            }&#10;        })&#10;&#10;        scrollToTopFab.setOnClickListener {&#10;            recyclerView.scrollToPosition(0)&#10;        }&#10;    }&#10;&#10;    private fun checkAndUpdateFabVisibility() {&#10;        val layoutManager = recyclerView.layoutManager as? LinearLayoutManager ?: return&#10;&#10;        if (adapter.itemCount == 0) {&#10;            Log.d(&quot;FAB_DEBUG&quot;, &quot;No items, hiding FAB&quot;)&#10;            scrollToTopFab.hide()&#10;            return&#10;        }&#10;&#10;        val firstVisibleItem = layoutManager.findFirstVisibleItemPosition()&#10;        Log.d(&#10;            &quot;FAB_DEBUG&quot;,&#10;            &quot;First visible item: $firstVisibleItem, Total items: ${adapter.itemCount}&quot;&#10;        )&#10;&#10;        if (firstVisibleItem != RecyclerView.NO_POSITION &amp;&amp; firstVisibleItem &gt; 2) {&#10;            Log.d(&quot;FAB_DEBUG&quot;, &quot;Showing FAB&quot;)&#10;            scrollToTopFab.show()&#10;        } else {&#10;            Log.d(&quot;FAB_DEBUG&quot;, &quot;Hiding FAB&quot;)&#10;            scrollToTopFab.hide()&#10;        }&#10;    }&#10;&#10;    private fun handleStartServiceClick() {&#10;        if (Settings.canDrawOverlays(requireContext())) {&#10;            serviceManager.startOverlayService(&quot;raids&quot;)&#10;            return&#10;        }&#10;&#10;        val builder = AlertDialog.Builder(requireContext())&#10;        val inflater = requireActivity().layoutInflater&#10;        val dialogView = inflater.inflate(R.layout.dialog_overlay_permission, null)&#10;&#10;        val notNowButton = dialogView.findViewById&lt;Button&gt;(R.id.notNowButton)&#10;        val openSettingsButton = dialogView.findViewById&lt;Button&gt;(R.id.openSettingsButton)&#10;&#10;        builder.setView(dialogView)&#10;        builder.setCancelable(false)&#10;        val dialog = builder.create()&#10;&#10;        notNowButton.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        openSettingsButton.setOnClickListener {&#10;            val intent = Intent(&#10;                Settings.ACTION_MANAGE_OVERLAY_PERMISSION,&#10;                &quot;package:${requireContext().packageName}&quot;.toUri()&#10;            )&#10;            startActivity(intent)&#10;            dialog.dismiss()&#10;        }&#10;&#10;        dialog.show()&#10;    }&#10;&#10;    private fun updateServiceButtonState(button: Button) {&#10;        val overlayPermission = Settings.canDrawOverlays(requireContext())&#10;        Log.d(&quot;PermissionStatus&quot;, &quot;Overlay permission: $overlayPermission&quot;)&#10;&#10;        if (!overlayPermission) {&#10;            button.text = &quot;Enable Overlay Permissions&quot;&#10;        } else {&#10;            button.text = &quot;Enable Overlay&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_overlay_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_overlay_settings.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/overlay_customization_layout.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/overlay_customization_layout.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;320dp&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:background=&quot;@android:color/background_dark&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- Drag Handle --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/drag_handle&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;        android:contentDescription=&quot;Drag handle&quot;&#10;        android:src=&quot;@drawable/ic_drag_handle_overlay&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- Title --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:text=&quot;Customize Overlay&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/drag_handle&quot; /&gt;&#10;&#10;    &lt;!-- Close Button --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/close_customization_button&quot;&#10;        android:layout_width=&quot;36dp&quot;&#10;        android:layout_height=&quot;36dp&quot;&#10;        android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;        android:contentDescription=&quot;Close&quot;&#10;        android:src=&quot;@drawable/close_24px&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;@id/title&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;@id/title&quot; /&gt;&#10;&#10;    &lt;!-- Button Size Section --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/size_label&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;Button Size:&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/title&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/size_value&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;48dp&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;@id/size_label&quot; /&gt;&#10;&#10;    &lt;SeekBar&#10;        android:id=&quot;@+id/size_seekbar&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:max=&quot;64&quot;&#10;        android:min=&quot;32&quot;&#10;        android:progress=&quot;48&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/size_label&quot; /&gt;&#10;&#10;    &lt;!-- Button Visibility Section --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/visibility_label&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;Button Visibility:&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/size_seekbar&quot; /&gt;&#10;&#10;    &lt;!-- RecyclerView for button customization --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/buttons_recycler_view&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:maxHeight=&quot;300dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/visibility_label&quot; /&gt;&#10;&#10;    &lt;!-- Reset Button --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/reset_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;Reset to Defaults&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/buttons_recycler_view&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>